from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
import telegram
import pandahouse as ph
import numpy as np

from airflow.decorators import dag, task

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
connection = {
    'host': 'https://clickhouse.lab.karpov.courses',
    'password': '',
    'user': 'student',
    'database': 'simulator_20250520'  
}


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DAG
default_args = {
    'owner': 'aj-halikova',
    'depends_on_past': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
    'start_date': datetime(2025, 6, 27)
}

schedule_interval = '0 8 * * *'  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11 –º—Å–∫


# Telegram –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
bot_token = '___'
bot = telegram.Bot(token=bot_token)
chat_id = -1002614297220 # 1023943467

@dag(default_args=default_args, schedule_interval=schedule_interval, catchup=False, tags=['app_report'])
def dag_botajkhalikova_appreport():
    
    @task()
    def extract_app_metrics():
        """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"""
        query = '''
        WITH 
        -- –ú–µ—Ç—Ä–∏–∫–∏ –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π
        feed_metrics AS (
            SELECT 
                toDate(time) AS date,
                uniqExact(user_id) AS feed_dau,
                countIf(action = 'view') AS views,
                countIf(action = 'like') AS likes,
                CASE 
                    WHEN countIf(action = 'view') > 0 THEN likes / views 
                    ELSE 0 
                END AS ctr
            FROM simulator_20250520.feed_actions
            WHERE toDate(time) BETWEEN today() - 30 AND yesterday()
            GROUP BY date
        ),
        
        -- –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
        message_metrics AS (
            SELECT 
                toDate(time) AS date,
                uniqExact(user_id) AS messenger_dau,
                count(*) AS messages_sent,
                uniqExact(receiver_id) AS users_received
            FROM simulator_20250520.message_actions
            WHERE toDate(time) BETWEEN today() - 30 AND yesterday()
            GROUP BY date
        ),
        
        -- –û–±—â–∏–π DAU –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_dau AS (
            SELECT 
                toDate(time) AS date,
                uniqExact(user_id) AS total_dau
            FROM (
                SELECT user_id, time FROM simulator_20250520.feed_actions
                WHERE toDate(time) BETWEEN today() - 30 AND yesterday()
                UNION ALL
                SELECT user_id, time FROM simulator_20250520.message_actions
                WHERE toDate(time) BETWEEN today() - 30 AND yesterday()
            )
            GROUP BY date
        )
        
        
        SELECT 
            a.date AS date,
            COALESCE(a.total_dau, 0) AS total_dau,
            COALESCE(f.feed_dau, 0) AS feed_dau,
            COALESCE(f.views, 0) AS views,
            COALESCE(f.likes, 0) AS likes,
            COALESCE(f.ctr, 0) AS ctr,
            COALESCE(m.messenger_dau, 0) AS messenger_dau,
            COALESCE(m.messages_sent, 0) AS messages_sent,
            COALESCE(m.users_received, 0) AS users_received
        FROM app_dau a
        LEFT JOIN feed_metrics f ON a.date = f.date
        LEFT JOIN message_metrics m ON a.date = m.date
        ORDER BY a.date
        '''
        
        df = ph.read_clickhouse(query, connection=connection)
               
        return df
    
    @task()
    def extract_yesterday_summary():
        """–°–≤–æ–¥–∫–∞ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å"""
        query = '''
        WITH 
        -- –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞
        yesterday_summary AS (
            SELECT 
                uniqExact(user_id) AS total_users_yesterday,
                uniqExactIf(user_id, source = 'organic') AS organic_users,
                uniqExactIf(user_id, source = 'ads') AS ads_users
            FROM (
                SELECT user_id, source FROM simulator_20250520.feed_actions
                WHERE toDate(time) = yesterday()
                UNION ALL
                SELECT user_id, source FROM simulator_20250520.message_actions
                WHERE toDate(time) = yesterday()
            )
        ),
        
        -- –ú–µ—Ç—Ä–∏–∫–∏ –ª–µ–Ω—Ç—ã –∑–∞ –≤—á–µ—Ä–∞
        feed_yesterday AS (
            SELECT 
                uniqExact(user_id) AS feed_dau,
                countIf(action = 'view') AS views,
                countIf(action = 'like') AS likes,
                CASE 
                    WHEN countIf(action = 'view') > 0 THEN likes / views 
                    ELSE 0 
                END AS ctr
            FROM simulator_20250520.feed_actions
            WHERE toDate(time) = yesterday()
        ),
        
        -- –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∑–∞ –≤—á–µ—Ä–∞
        message_yesterday AS (
            SELECT 
                uniqExact(user_id) AS messenger_dau,
                count(*) AS messages_sent,
                uniqExact(receiver_id) AS users_received
            FROM simulator_20250520.message_actions
            WHERE toDate(time) = yesterday()
        )
        
        SELECT 
            COALESCE(ys.total_users_yesterday, 0) AS total_users_yesterday,
            COALESCE(ys.organic_users, 0) AS organic_users,
            COALESCE(ys.ads_users, 0) AS ads_users,
            COALESCE(fy.feed_dau, 0) AS feed_dau,
            COALESCE(fy.views, 0) AS views,
            COALESCE(fy.likes, 0) AS likes,
            COALESCE(fy.ctr, 0) AS ctr,
            COALESCE(my.messenger_dau, 0) AS messenger_dau,
            COALESCE(my.messages_sent, 0) AS messages_sent,
            COALESCE(my.users_received, 0) AS users_received
        FROM yesterday_summary ys
        FULL OUTER JOIN feed_yesterday fy ON 1=1
        FULL OUTER JOIN message_yesterday my ON 1=1
        '''
        
        df = ph.read_clickhouse(query, connection=connection)
        
        return df
    
    @task()
    def send_text_report(app_metrics, yesterday_summary):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        yesterday_data = yesterday_summary.iloc[0]
        yesterday = pd.Timestamp.now().normalize() - pd.Timedelta(days=1)
        report_date = yesterday.strftime('%d.%m.%Y')
        
        def safe_int(value, default=0):
            try:
                return int(value) if pd.notna(value) else default
            except:
                return default
        
        def safe_float(value, default=0.0):
            try:
                return float(value) if pd.notna(value) else default
            except:
                return default
        
        messages_per_user = safe_float(yesterday_data['messages_sent']/yesterday_data['messenger_dau'] if yesterday_data['messenger_dau'] != 0 else 0)
        avg_dau = app_metrics['total_dau'].mean() if not app_metrics.empty else 0
        avg_ctr = app_metrics['ctr'].mean() if not app_metrics.empty else 0.0
        avg_messages = app_metrics['messages_sent'].mean() if not app_metrics.empty else 0
        
        msg = f"""
üìä **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞ {report_date}**

üè¢ **–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:**
‚Ä¢ –û–±—â–∏–π DAU: {safe_int(yesterday_data['total_users_yesterday']):,}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ organic: {safe_int(yesterday_data['organic_users']):,}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ ads: {safe_int(yesterday_data['ads_users']):,}

üì∞ **–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:**
‚Ä¢ DAU –ª–µ–Ω—Ç—ã: {safe_int(yesterday_data['feed_dau']):,}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {safe_int(yesterday_data['views']):,}
‚Ä¢ –õ–∞–π–∫–∏: {safe_int(yesterday_data['likes']):,}
‚Ä¢ CTR: {safe_float(yesterday_data['ctr']):.3f}

üí¨ **–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:**
‚Ä¢ DAU –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞: {safe_int(yesterday_data['messenger_dau']):,}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {safe_int(yesterday_data['messages_sent']):,}
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {safe_int(yesterday_data['users_received']):,}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {messages_per_user:.2f}

üìà **–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π DAU: {avg_dau:.0f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π CTR: {avg_ctr:.3f}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å: {avg_messages:.0f}
        """
        
        bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
    
    @task()
    def send_comprehensive_report_new(app_metrics, detailed_data):
        """–°–æ–∑–¥–∞–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""

        if app_metrics.empty:
            bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (app_metrics)")
            return
        if not detailed_data or detailed_data['source'].empty:
            bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (source_data)")
            return

        if 'a.date' in app_metrics.columns:
            app_metrics = app_metrics.rename(columns={'a.date': 'date'})
        app_metrics['date'] = pd.to_datetime(app_metrics['date'])
        
        source_df = detailed_data['source']
        source_df['date'] = pd.to_datetime(source_df['date'])

        # –ì—Ä–∞—Ñ–∏–∫ 
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', fontsize=16, fontweight='bold')

        # 1. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ DAU 
        if 'total_dau' in app_metrics.columns:
            axes[0, 0].plot(app_metrics['date'], app_metrics['total_dau'], marker='o', linewidth=2, color='blue')
            axes[0, 0].set_title('–î–∏–Ω–∞–º–∏–∫–∞ DAU', fontweight='bold')
            axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            axes[0, 0].tick_params(axis='x', rotation=45)
            axes[0, 0].grid(True, alpha=0.3)
        else:
            axes[0, 0].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–ø–æ DAU', ha='center', va='center', transform=axes[0, 0].transAxes)
            axes[0, 0].set_title('–î–∏–Ω–∞–º–∏–∫–∞ DAU', fontweight='bold')

        # 2. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ CTR
        if 'ctr' in app_metrics.columns:
            axes[0, 1].plot(app_metrics['date'], app_metrics['ctr']*100, marker='s', linewidth=2, color='green')
            axes[0, 1].set_title('–î–∏–Ω–∞–º–∏–∫–∞ CTR', fontweight='bold')
            axes[0, 1].set_ylabel('CTR (%)')
            axes[0, 1].tick_params(axis='x', rotation=45)
            axes[0, 1].grid(True, alpha=0.3)
        else:
            axes[0, 1].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–ø–æ CTR', ha='center', va='center', transform=axes[0, 1].transAxes)
            axes[0, 1].set_title('–î–∏–Ω–∞–º–∏–∫–∞ CTR', fontweight='bold')
            
        # 3. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        pivot_source = source_df.pivot_table(
            values='users_from_source', 
            index='date', 
            columns='source', 
            aggfunc='sum',
            fill_value=0
        )
        for source in pivot_source.columns:
            axes[1, 0].plot(pivot_source.index, pivot_source[source], marker='o', label=source, linewidth=2)
        axes[1, 0].set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º', fontweight='bold')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        axes[1, 0].legend()
        axes[1, 0].tick_params(axis='x', rotation=45)
        axes[1, 0].grid(True, alpha=0.3)
        
        # 4. –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
        if 'messages_sent' in app_metrics.columns:
            axes[1, 1].plot(app_metrics['date'], app_metrics['messages_sent'], marker='^', linewidth=2, color='purple')
            axes[1, 1].set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å', fontweight='bold')
            axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
            axes[1, 1].tick_params(axis='x', rotation=45)
            axes[1, 1].grid(True, alpha=0.3)
        else:
            axes[1, 1].text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º', ha='center', va='center', transform=axes[1, 1].transAxes)
            axes[1, 1].set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å', fontweight='bold')

        plt.tight_layout()

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        plot_object = io.BytesIO()
        plt.savefig(plot_object, format='png', dpi=300, bbox_inches='tight')
        plot_object.seek(0)
        plot_object.name = 'app_comprehensive_report_new.png'
        plt.close()
        
        bot.send_photo(chat_id=chat_id, photo=plot_object, caption='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    
    @task()
    def send_heatmap(detailed_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        if not detailed_data or detailed_data['hourly'].empty:
            msg = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"
            bot.send_message(chat_id=chat_id, text=msg)
            return
        
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
        hourly_df = detailed_data['hourly']
        hourly_df['date'] = pd.to_datetime(hourly_df['date'])
        hourly_df['weekday'] = hourly_df['date'].dt.dayofweek
        
        heatmap_data = hourly_df.pivot_table(
            values='hourly_dau', 
            index='weekday', 
            columns='hour', 
            aggfunc='mean',
            fill_value=0
        )
        
        fig, ax = plt.subplots(1, 1, figsize=(15, 8))
        sns.heatmap(heatmap_data, annot=True, fmt='.0f', cmap='YlOrRd', ax=ax)
        ax.set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –∏ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontweight='bold', fontsize=14)
        ax.set_xlabel('–ß–∞—Å –¥–Ω—è')
        ax.set_ylabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
        ax.set_yticklabels(['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'])
        
        plt.tight_layout()
        
        plot_object = io.BytesIO()
        plt.savefig(plot_object, format='png', dpi=300, bbox_inches='tight')
        plot_object.seek(0)
        plot_object.name = 'heatmap.png'
        plt.close()
        
        bot.send_photo(chat_id=chat_id, photo=plot_object, caption='–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º')
    
    @task()
    def send_period_comparison(app_metrics):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤"""
        
        if len(app_metrics) < 28:
            msg = "‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 28 –¥–Ω–µ–π)"
            bot.send_message(chat_id=chat_id, text=msg)
            return

        fig, axes = plt.subplots(1, 2, figsize=(16, 8))
        fig.suptitle('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ (1-—è –∏ 2-—è –ø–æ–ª–æ–≤–∏–Ω–∞ –º–µ—Å—è—Ü–∞)', fontsize=16, fontweight='bold')
        
        first_half = app_metrics.iloc[:len(app_metrics)//2]
        second_half = app_metrics.iloc[len(app_metrics)//2:]
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ DAU
        if 'total_dau' in app_metrics.columns:
            current_dau = second_half['total_dau'].mean()
            previous_dau = first_half['total_dau'].mean()
            change_pct = ((current_dau - previous_dau) / previous_dau * 100) if previous_dau > 0 else 0
            
            periods = ['1-—è –ø–æ–ª–æ–≤–∏–Ω–∞', '2-—è –ø–æ–ª–æ–≤–∏–Ω–∞']
            values = [previous_dau, current_dau]
            colors = ['lightcoral', 'lightblue']
            
            bars = axes[0].bar(periods, values, color=colors, alpha=0.8)
            axes[0].set_title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ DAU\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct:+.1f}%', fontweight='bold')
            axes[0].set_ylabel('–°—Ä–µ–¥–Ω–∏–π DAU')
            axes[0].grid(True, alpha=0.3)
            
            for bar, value in zip(bars, values):
                axes[0].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01, 
                             f'{value:.0f}', ha='center', va='bottom')
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ CTR
        if 'ctr' in app_metrics.columns:
            current_ctr = second_half['ctr'].mean()
            previous_ctr = first_half['ctr'].mean()
            change_pct_ctr = ((current_ctr - previous_ctr) / previous_ctr * 100) if previous_ctr > 0 else 0
            
            periods = ['1-—è –ø–æ–ª–æ–≤–∏–Ω–∞', '2-—è –ø–æ–ª–æ–≤–∏–Ω–∞']
            values_ctr = [previous_ctr*100, current_ctr*100]
            colors = ['lightcoral', 'lightblue']
            
            bars = axes[1].bar(periods, values_ctr, color=colors, alpha=0.8)
            axes[1].set_title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ CTR\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_pct_ctr:+.1f}%', fontweight='bold')
            axes[1].set_ylabel('–°—Ä–µ–¥–Ω–∏–π CTR (%)')
            axes[1].grid(True, alpha=0.3)
            
            for bar, value in zip(bars, values_ctr):
                axes[1].text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values_ctr)*0.01, 
                             f'{value:.3f}%', ha='center', va='bottom')
        
        plt.tight_layout()
        
        plot_object = io.BytesIO()
        plt.savefig(plot_object, format='png', dpi=300, bbox_inches='tight')
        plot_object.seek(0)
        plot_object.name = 'period_comparison.png'
        plt.close()
        
        bot.send_photo(chat_id=chat_id, photo=plot_object, caption='üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤')
    
    @task()
    def extract_detailed_analytics_data():
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        try:
            structure_query = "DESCRIBE simulator_20250520.feed_actions"
            structure_data = ph.read_clickhouse(structure_query, connection=connection)
            print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã feed_actions: {structure_data}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            time_column = 'time'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not structure_data.empty:
                columns = structure_data.iloc[:, 0].tolist()
                if 'timestamp' in columns:
                    time_column = 'timestamp'
                elif 'time' in columns:
                    time_column = 'time'
                elif 'event_time' in columns:
                    time_column = 'event_time'
                print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏: {time_column}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
            time_column = 'time'  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        try:
            # 1. –î–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            hourly_query = f'''
            SELECT 
                toDate({time_column}) AS date,
                toHour({time_column}) AS hour,
                uniqExact(user_id) AS hourly_dau
            FROM simulator_20250520.feed_actions
            WHERE toDate({time_column}) BETWEEN today() - 30 AND yesterday()
            GROUP BY date, hour
            ORDER BY date, hour
            '''
            
            hourly_data = ph.read_clickhouse(hourly_query, connection=connection)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            hourly_data = pd.DataFrame()
        
        try:
            # 2. –î–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞
            source_query = f'''
            SELECT 
                toDate({time_column}) AS date,
                source,
                uniqExact(user_id) AS users_from_source
            FROM simulator_20250520.feed_actions
            WHERE toDate({time_column}) BETWEEN today() - 30 AND yesterday()
            GROUP BY date, source
            ORDER BY date, source
            '''
            
            source_data = ph.read_clickhouse(source_query, connection=connection)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º: {e}")
            source_data = pd.DataFrame()
        
        return {
            'hourly': hourly_data,
            'source': source_data
        }
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    app_metrics = extract_app_metrics()
    yesterday_summary = extract_yesterday_summary()
    detailed_data = extract_detailed_analytics_data()
    
    send_text_report(app_metrics, yesterday_summary)
    send_comprehensive_report_new(app_metrics, detailed_data)
    send_heatmap(detailed_data)
    send_period_comparison(app_metrics)


dag_botajkhalikova_appreport = dag_botajkhalikova_appreport() 
